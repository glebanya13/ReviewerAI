#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
"""

import sys
import time
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫...")
    try:
        import pandas as pd
        print("‚úÖ Pandas –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ùå Pandas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    try:
        import sklearn
        print("‚úÖ Scikit-learn –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ùå Scikit-learn –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    try:
        import numpy as np
        print("‚úÖ NumPy –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ùå NumPy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    test_data = [
        ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", 0),
        ("–¢—ã –∏–¥–∏–æ—Ç!", 1),
        ("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å", 0),
        ("–£–±–∏–π—Ü–∞!", 1),
        ("–•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞", 0),
        ("–ù–µ–Ω–∞–≤–∏–∂—É —Ç–µ–±—è", 1),
        ("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞", 0),
        ("–¢—ã —Ç—É–ø–æ–π", 1),
        ("–°–ø–∞—Å–∏–±–æ", 0),
        ("–ú–∞–Ω—å—è–∫", 1)
    ] * 100  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    
    df = pd.DataFrame(test_data, columns=['text', 'label'])
    print(f"üìä –°–æ–∑–¥–∞–Ω –¥–∞—Ç–∞—Å–µ—Ç: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("üîÑ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    start_time = time.time()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    df['text_clean'] = df['text'].str.lower()
    
    # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    vectorizer = TfidfVectorizer(max_features=1000)
    X = vectorizer.fit_transform(df['text_clean'])
    y = df['label']
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    
    prep_time = time.time() - start_time
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {prep_time:.2f} —Å–µ–∫")
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    start_time = time.time()
    
    model = LogisticRegression(random_state=42, max_iter=1000)
    model.fit(X_train, y_train)
    
    train_time = time.time() - start_time
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {train_time:.2f} —Å–µ–∫")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    
    print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.4f}")
    
    # –¢–µ—Å—Ç –Ω–∞ –Ω–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö...")
    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–¢—ã –¥–µ–±–∏–ª!",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å",
        "–£–±–∏–π—Ü–∞ –∏ –º–∞–Ω—å—è–∫!"
    ]
    
    for text in test_texts:
        text_clean = text.lower()
        X_new = vectorizer.transform([text_clean])
        pred = model.predict(X_new)[0]
        proba = model.predict_proba(X_new)[0][1]
        
        print(f"üìù '{text}' -> {'–¢–æ–∫—Å–∏—á–Ω–æ' if pred else '–ù–µ—Ç–æ–∫—Å–∏—á–Ω–æ'} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {proba:.3f})")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_sklearn_optimized.py")
    print("2. –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ CUDA –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python train_optimized.py")

if __name__ == "__main__":
    quick_test()
